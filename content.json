{"pages":[{"title":"","text":"个人简介 个人信息：电子科学与技术专业 目前从事微软产品的技术支持（正在准备微软产品研发的面试） 坚信未来是计算机的世界，也真切地希望世界和平。 博客信息 网站采用的hexo-theme-amazing 更新日志：–2021.2.21：正式启用并持续维护 本站推荐索引 博客主题相关正在更新。。。 计划2021计划 2021.3.1 2021-GOALS 3月份之前开始微软的面试 减少游戏的时间 冷静乐观的处理今年发生的所有事情 时间轴记录","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"","link":"/album/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"","text":"杂谈 tips：github登录后按时间正序查看,本插件地址..「+99次查看」 加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '862d197f0b5b5e3173d5', clientSecret: 'd4b6cd32547578fc6a1e463f4f8c405fc215070b', id: 'ZaTan', repo: 'Gitalk', owner: 'jarvis-d-01', admin: 'jarvis-d-01', createIssueManually: true, distractionFreeMode: false, }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"英语","text":"","link":"/categories/%E8%8B%B1%E8%AF%AD/index.html"},{"title":"其他","text":"","link":"/categories/%E5%85%B6%E4%BB%96/index.html"},{"title":"感悟","text":"","link":"/tags/%E6%84%9F%E6%82%9F/index.html"},{"title":"翻译","text":"","link":"/tags/%E7%BF%BB%E8%AF%91/index.html"},{"title":"文章阅读","text":"","link":"/categories/%E8%8B%B1%E8%AF%AD/%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/index.html"}],"posts":[{"title":"leetcode-剑指offer 53","text":"点击：题目链接：一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。示例 1:输入: [0,1,3]输出: 2示例 2:输入: [0,1,2,3,4,5,6,7,9]输出: 8 思路一读完题目，我们发现几个条件： 该数组是递增有序的 数字只出现一次 只有一个数不再数组内 因此首先我们想到的就是暴力的方法，逐一扫描找出该数 代码1234567891011class Solution {public: int missingNumber(vector&lt;int&gt;&amp; nums) { int tmp = 0; for(int i=0; i&lt;nums.size(); i++){ if(tmp != nums[i]) break; //如果发现不同的就中断当前for循环 tmp++; } return tmp; //返回最终值 }}; 思路二根据暴力的解法，我们发现当低位出现数组下标和元素的值不匹配的时候，那么之后的所有的数都是不匹配的。因此我们可以使用二分法(双指针)。首先查看中值是否符合条件，若不相等右指针缩小范围。若相等，将左指针移动到中值，下一部分的二分之一。 代码12345678910111213class Solution {public: int missingNumber(vector&lt;int&gt;&amp; nums) { int l=0, r=nums.size()-1; int mid; while(l &lt;= r){ mid = (l+r)/2; if(nums[mid] != mid) r= mid-1; //不等，右指针前挪，左指针不动 else l = mid+1; //相等，左指针右挪，右指针不动 } return l; }};","link":"/leetcode-%E5%89%91%E6%8C%87offer%2053/"},{"title":"leetcode-打乱数组","text":"点击：题目链接：给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。实现 Solution class:Solution(int[] nums) 使用整数数组 nums 初始化对象int[] reset() 重设数组到它的初始状态并返回int[] shuffle() 返回数组随机打乱后的结果 思路提取关键字–打乱。顾名思义，我们要像洗牌一样的“洗数组”。 我们利用标准库的随机函数std::shuffle,随机放置元素后返回“打乱”的数组。 代码123456789101112131415161718192021222324class Solution {public: Solution(vector&lt;int&gt;&amp; nums) { original = nums; this-&gt;nums = nums; } /** Resets the array to its original configuration and return it. */ vector&lt;int&gt; reset() { return original; } /** Returns a random shuffling of the array. */ vector&lt;int&gt; shuffle() { std::random_device rd; std::mt19937 g(rd()); std::shuffle(nums.begin(), nums.end(), g); return nums; }private: vector&lt;int&gt; original; vector&lt;int&gt; nums;}; 细究shuffle的基本实现原理：取当前值，和之前读取过的其中一个值互换位置，已达到随机的目的。 代码1234567vector&lt;int&gt; shuffle() { for(int i = 0; i&lt;nums.size();i++){ int randnum = std::rand() % (original.size()-i); //只和使用过的值互换位置 std::swap(nums[randnum],nums[i]); } return nums;}","link":"/leetcode-%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/"},{"title":"博客创立感想","text":"去年的刚接触hexo这类静态博客的时候，觉得很新奇，跟着网上的教学创建了一个，折腾了些时间。上传了一篇C++学习的笔记，之后就似乎淡忘了它，直到公司因微软policy的要求，要清空所有个人在公司登录过的github上的库，才突然想起它。不由的感觉自己做事还是会有点三分钟热度。 删掉了之前的博客库后，隔了段时间，发现这个对于面试也会是一个加分项。出于这一十分“ 功利 ”的目的，最后决定把它好好发展成具有自己特色和需求的个人空间站和树洞。 之后好好维护，好好拓充它。 自勉。","link":"/%E5%8D%9A%E5%AE%A2%E5%88%9B%E7%AB%8B%E6%84%9F%E6%83%B3/"},{"title":"乔布斯斯坦福大学毕业典礼演讲","text":"最近在练口语，网上搜了很多教程，试了几个都不是很适合我（或许是坚持不下来）。最后还是打算读读名人的演讲稿，练习口语的时候还能练练词汇语法和口才。 正文I am honored to be with you today at your commencement from one of the finest universities in the world. I never graduated from college. Truth be told, this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories. 我很荣幸今天在世界上最好的大学参见你们的毕业典礼。但是我没有从大学毕业过。老实说，这是我里大学毕业最近的一次。今天我想跟你们讲三个我生命中的故事。没有关系，不是什么大事，只是三个故事。 The first story is about connecting the dots. 第一个故事是关于联系每个点。 I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out? 我在开学的第六个月，从里德学院辍学， 但之后大概在我真正退学的时候，我却以入学生的身份额外带了18个月，所以为什么我要辍学？ It started before I was born. My biological mother was a young, unwed college graduate student, and lingshe decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl. So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him?” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only a few months later when my parents promised that I would someday go to college. 这要从我出生前开始。 我生物学母亲是一个没有结婚的年轻的大学毕业生，她决定通过把我放入领养机构。她非常强势的坚持我必须由大学毕业的家庭来领养，所以在我出生的时候所有的事情就由一个律师和他的妻子管理。意外的是，在我出生的时候，他们在最后还是想要一个女孩。因此，本来在等待清单的我的养父母，在半夜接到了一个电话：我们有一个意外的男婴，你想要他吗？ 他们说： 当然。 我的生物学母亲之后发现我的母亲没有从大学毕业，并且我的父亲没有从高中毕业。她拒绝在最后收养协议上签字。几个月后，我的父母承诺说一定会让我上大学，她只好妥协。 And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out. And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting. 17年后我真的上了大学。但是我天真的选择一个学费几乎和斯坦福一样贵的大学， 并且我父母的所有工作的积蓄都被用到了我大学的费用。六个月后，我看不到任何上大学的意义。我不知道我在我之后生命中想要做什么，并且不知道大学将如何帮我指明方向。并且在这，我花了我父母他们用一辈子存的钱。因此我决定辍学并且坚信所有都会变好。当时我还是会很害怕，但是现在回顾它，他是确实我做过的最好的决定。我辍学的期间我可以停止上那些我不感兴趣但是必须的课程，同时开始学习看起来有趣的课程。 It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example: 他不是所有都是具有浪漫色彩的。我没有宿舍，因此我睡在我朋友房间的地上， 我通过卖5分一个可乐瓶来买食物，我会每周六晚上走7英里到Hare Krishna 神庙，吃上一顿一周内最好的一顿饭。我很喜欢它。我遭受的大多数事情都是跟随我的好奇心和直觉，这些以后都是无价的。让我给你举个例子： Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this. I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating. 在那个时候，里德学院提供了可能是这个国家最好的书法课程。遍布校园内的每一个黑板报，每个画作上的签名，都是漂亮的手写书法字体。因为我辍学并且不用学普通的课程，我决定上一个书法课来学习怎么做到这样。我学习了细字和衬线体，学习了改变不同字符组合之间的空格，学习了使字体变得更棒，我发现它非常有吸引力。 None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts. And since Windows just copied the Mac, it’s likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later. 这些在我的生命中没有一个是有实际用途的。但是十年后，当我们设计第一台MAC电脑的时候，它启发了我。我们把它都涉及到了MAC里面。这是第一台拥有漂亮字体的电脑。如果我从没有在大学上那个单个课程，MAC将不会有大量的字体或者按比例间隔的字体。同时要不是windows抄袭了MAC，可能没有一台个人电脑会拥有他们。如果我没有辍学，我就不会上那节字体课，同时他们生产的个人电脑可能不会有完美的字体。 当然在我上大学的时候是联系到未来的这些点滴。但在十年后，回想起来它友视非常非常清晰。 Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life. 再次，又不能预见以后的事情；你只能通过回忆联系他们。因此你必须相信这些点滴将会在某个时候联系着你的未来。你不得不相信-你的本能，命运，生活，因果，无论什么。这个方法从没让我放弃，它让我生命中所有事情都变的不同。 My second story is about love and loss. I was lucky - I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a $2 billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30. And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating. I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly. I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me - I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over. I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life. During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world. In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together. I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle. My third story is about death. When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today?” And whenever the answer has been “No” for too many days in a row, I know I need to change something. Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything - all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart. About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes. I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now. This was the closest I’ve been to facing death, and I hope it’s the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept: No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true. Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of others’ opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary. When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions. Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you. Stay Hungry. Stay Foolish. Thank you all very much.","link":"/%E4%B9%94%E5%B8%83%E6%96%AF%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A%E5%85%B8%E7%A4%BC%E6%BC%94%E8%AE%B2/"},{"title":"leetcode-链表深度拷贝","text":"点击：题目链接：请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。 思路链表拷贝有两种，浅层拷贝和深度拷贝。浅层拷贝—拷贝后的链表和之前的共享同一内存，即仍指向同一份next链表深度拷贝—重新申请内存来放置拷贝后的链表 故我们可以直接使用一个map表一一保存每个结点，再进行拷贝复制每个结点的关系。 代码12345678910111213141516171819202122232425262728293031323334class Node {public: int val; Node* next; Node* random; Node(int _val) { val = _val; next = NULL; random = NULL; }};class Solution {public: Node* copyRandomList(Node* head) { Node* cur = new Node(0); cur = head; unordered_map&lt;Node*, Node*&gt; hash; while(cur != nullptr){ //将每个结点一一对应存入哈希表 hash[cur] = new Node(cur-&gt;val); cur = cur-&gt;next; } cur = head; while(cur != nullptr){ //拷贝每个节点的对应关系 hash[cur]-&gt;next = hash[cur-&gt;next]; hash[cur]-&gt;random = hash[cur-&gt;random]; cur = cur-&gt;next; } return hash[head]; }}; 小总结读题的时候一定要确切的明白题意。比如这道，刚读完，我一直以为要自己来决定结点之间的随即关系（浪费了比较长的时间后感觉不对劲）。结果只需要复制原来的。","link":"/leetcode-%E9%93%BE%E8%A1%A8%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D/"},{"title":"虚函数","text":"概念 微软官方文档介绍： A virtual function is a member function that you expect to be redefined in derived classes.When you refer to a derived class object using a pointer or a reference to the base class, you can call a virtual function for that object and execute the derived class’s version of the function. 本质上，虚函数是成员函数的一种。它主要应用在多态的场景。它是为了我们能够在定义子类时可以重载从父类继承过来的成员函数（即虚函数）。如果不需要重载，我们也可以直接调用执行它，把它当作普通的成员函数。 代码演示(C++)我们可以写一个父类和一个子类： 123456789101112131415class parent{public: void A() { std::cout&lt;&lt;&quot;This parent's A&quot; &lt;&lt;endl; } virtual void B() { std::cout&lt;&lt;&quot;This parent's B&quot; &lt;&lt;endl; } //虚函数就是在成员函数前加一个virtual};class son : public parent{public: void A(){ std::cout&lt;&lt;&quot;This son's A&quot;&lt;&lt;endl;} void B(){std::cout&lt;&lt;&quot;This son's B&quot;&lt;&lt;endl;}}; 然后我们调用它： 123456int main(){ parent* SON = new son(); SON-&gt;A(); SON-&gt;B();} 运行结果如图： 从结果来看，parent类里的B已经被son类的B重载了。 底层原理那么追根究底，虚函数底层逻辑是什么呢？","link":"/%E8%99%9A%E5%87%BD%E6%95%B0/"},{"title":"智能指针","text":"古人曰：好记性不如烂笔头。 引入概念在C++的学习中，指针是一个帮助我们管理内存的工具。当我们为指针申请了一块内存之后，为了内存能够循环利用，我们也需要释放它。但是实在开发中，繁琐的程序往往会让我们遗忘，故引入智能指针。智能指针的工作就是，在它被销毁的时候且内存没有被其他指针指向，会自动释放没有其他指针引用的内存块。 常见的智能指针（C++11）shared_ptr 定义 顾名思义，就是多个shared_ptr可以指向同一块内存。 使用12345678910//createshared_ptr&lt;T&gt; p;shared_ptr&lt;T&gt; p = make_shared&lt;T&gt;();shared_ptr&lt;T&gt; p = make_shared&lt;T&gt;(ags);shared_ptr&lt;T&gt; p = make_shared&lt;T&gt;(n,ags); //n个agsshared_ptr&lt;T&gt; p(new T(val));shared_ptr&lt;T&gt; p(q);shared_ptr&lt;T&gt; p(u); //u是unique_ptr,赋值给p后，因已不是唯一，u被置空。shared_ptr&lt;T&gt; p(q,d); 其他操作 Name Description p.get() 返回p中保存的指针 p.reset(q) 将p指向q p.reset(q,d) d为lamda表达式([capture list](parameter list) -&gt; return type{function type})，p会执行该表达式 swap(q,p)/ p.swap(q) 交换p和q的指针 unique_ptr 定义 与shared_ptr不同，它表示这一块内存只归该指针所有。 使用123unique_ptr&lt;T&gt; u;unique_ptr&lt;T,D&gt; u;unique_ptr&lt;T,D&gt; u(d); 其他操作 Name Description u.release() 将指针置空(空悬指针) u.reset(q) 若q为内置指针，令u指向这个对象，否则，置为空 weak_ptr 定义它可以看作是另一种shared_ptr, 但是当它指向一块shared_ptr 创建12weak_ptr&lt;T&gt; w;weak_ptr&lt;T&gt; w(sp); 其他操作 Name Description w.use_count() 与w共享的shared_prt的数量 w.expired() count为0，返回true，否则为false w.lock() expired为true，返回空，否则返回w指向的shared_ptr","link":"/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"}],"tags":[{"name":"leetcode","slug":"leetcode","link":"/tags/leetcode/"},{"name":"感想","slug":"感想","link":"/tags/%E6%84%9F%E6%83%B3/"},{"name":"翻译","slug":"翻译","link":"/tags/%E7%BF%BB%E8%AF%91/"},{"name":"c++","slug":"c","link":"/tags/c/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"其他","slug":"其他","link":"/categories/%E5%85%B6%E4%BB%96/"},{"name":"英语","slug":"英语","link":"/categories/%E8%8B%B1%E8%AF%AD/"},{"name":"算法","slug":"技术/算法","link":"/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"},{"name":"文章阅读","slug":"英语/文章阅读","link":"/categories/%E8%8B%B1%E8%AF%AD/%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/"},{"name":"语言","slug":"技术/语言","link":"/categories/%E6%8A%80%E6%9C%AF/%E8%AF%AD%E8%A8%80/"}]}