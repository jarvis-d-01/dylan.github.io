{"pages":[{"title":"","text":"个人简介 个人信息：电子科学与技术专业 目前从事微软产品的技术支持（正在准备微软产品研发的面试） 坚信未来是计算机的世界，也真切地希望世界和平。 博客信息 网站采用的hexo-theme-amazing 更新日志：–2021.2.21：正式启用并持续维护 本站推荐索引 博客主题相关正在更新。。。 计划2021计划 2021.3.1 2021-GOALS 减少游戏的时间 冷静乐观的处理今年发生的所有事情 时间轴记录","link":"/about/index.html"},{"title":"","text":"","link":"/album/index.html"},{"title":"categories","text":"","link":"/categories/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"","text":"杂谈 tips：github登录后按时间正序查看,本插件地址..「+99次查看」 加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '862d197f0b5b5e3173d5', clientSecret: 'd4b6cd32547578fc6a1e463f4f8c405fc215070b', id: 'ZaTan', repo: 'Gitalk', owner: 'jarvis-d-01', admin: 'jarvis-d-01', createIssueManually: true, distractionFreeMode: false, }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"tags","text":"","link":"/tags/index.html"},{"title":"英语","text":"","link":"/categories/%E8%8B%B1%E8%AF%AD/index.html"},{"title":"其他","text":"","link":"/categories/%E5%85%B6%E4%BB%96/index.html"},{"title":"感悟","text":"","link":"/tags/%E6%84%9F%E6%82%9F/index.html"},{"title":"翻译","text":"","link":"/tags/%E7%BF%BB%E8%AF%91/index.html"},{"title":"文章阅读","text":"","link":"/categories/%E8%8B%B1%E8%AF%AD/%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/index.html"}],"posts":[{"title":"leetcode-格雷编码","text":"点击：题目链接：格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。即使有多个不同答案，你也只需要返回其中一种。格雷编码序列必须以 0 开头。 思路利用格雷编码的”BYG”的转换方式，将1~n的二进制表达式转换成格雷码 代码123456789101112class Solution {public: vector&lt;int&gt; grayCode(int n) { vector&lt;int&gt; res; int num = 1 &lt;&lt; n; for (int i = 0; i &lt; num; ++i) { res.push_back(i ^ i &gt;&gt; 1); } return res; }}; 复杂度时间：O(n), 空间O（1）","link":"/leetcode--%E6%A0%BC%E9%9B%B7%E7%BC%96%E7%A0%81/"},{"title":"leetcode-二叉树中的最大路径和","text":"点击：题目链接：路径 被定义为一条从树中任意节点出发，沿父节点-子节点连接，达到任意节点的序列。同一个节点在一条路径序列中 至多出现一次 。该路径 至少包含一个 节点，且不一定经过根节点。路径和 是路径中各节点值的总和。给你一个二叉树的根节点 root ，返回其 最大路径和 。 思路我们可以用深度优先搜索，遍历每个节点，再求和，然后找出最大的路径和 代码123456789101112131415161718192021222324class Solution {public: int maxPathSum(TreeNode* root) { dfs(root); return max_val; }private: int max_val = INT_MIN; int dfs(TreeNode* root) { if (root == nullptr) return 0; //if the node &lt; 0, it will be ignored int left = max(dfs(root-&gt;left),0); int right = max(dfs(root-&gt;right),0); // record the maxium value int sum = max(root-&gt;val, (root-&gt;val + left + right)); max_val = max(max_val, sum); //return maxium sum of son-tree return root-&gt;val+max(left, right); }}; 复杂度时间，O（N）， 空间O（N）","link":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E8%B7%AF%E5%BE%84%E5%92%8C/"},{"title":"leetcode-x的平方根","text":"点击：题目链接：实现 int sqrt(int x) 函数。计算并返回 x 的平方根，其中 x 是非负整数。由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去 思路首先我们可以使用二分法，范围可以是0到所给的数，然后使中间数的平方不断找到最接近的那个值 代码12345678910111213141516171819class Solution {public: int mySqrt(int x) { int l = 0, r = x, ans = -1; while(l&lt;=r){ int mid = (r+l)/2; if((long long)mid*mid &lt;=x){ ans = mid; l = mid+1; } else{ r = mid-1; } } return ans; }}; 复杂度时间：O（logN）, 空间O（1） 思路还有一种就是使用牛顿迭代法。假设x为我们要找的数，C为给的目标值，那么x²无限接近于C。那我们列出这么一个二元一次方程，y= x²-C。当y=0时，即满足所需条件。我们任取一个值，（x0,x0²-C），然后取该点的切线斜率（二次方程求导）2x, 由此可得切线方程，y= 2x*x0 + x0²-C, 由图我们看到当x0的切线与x轴相交时，就是我们下一个迭代点。即2x*x0 + x0²-C中x的值就是下一个我们所要用的迭代点。当两个点不断接近时，理论上来说该点就是我们所要的开平方数。一般两个点差值小于等于-10的六次方到七次方,就可以满足条件了 12345678910111213141516class Solution {public: int mySqrt(int x) { if(x==0) return x; double x0 = x, C= x, xi = -1; while(true){ xi = 0.5*(x0+ C/x0); if(fabs(x0-xi) &lt;1e-7){ break; } x0 = xi; } return x0; }}; 复杂度时间：O（logX）,比二分法更快一些。空间：O（1） 拓展若要保留小数点后几位，可以先乘10的几次方，然后再除以它 参考12num =(int) (num * 1000);num = (double)(num / 1000);","link":"/leetcode-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"},{"title":"leetcode-二叉树的序列化与反序列化","text":"点击：题目链接：序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。 思路由题意的，先将二叉树的所有节点转换成一个字符串或存储在一个连续的存储区域，然后再读取这个区域，将其转换成原来的二叉树。我们可以用前序，中序，后序三种顺序的任一一种。这里使用的是前序遍历。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Codec {public: // Encodes a tree to a single string. string serialize(TreeNode* root) { dfs(root); return nodes; } void dfs(TreeNode* root) { if (root == nullptr) { nodes += &quot;null,&quot;; return; } nodes += to_string(root-&gt;val) + &quot;,&quot;; dfs(root-&gt;left); dfs(root-&gt;right); } // Decodes your encoded data to tree. TreeNode* deserialize(string data) { tmp = data; return de_dfs(); } TreeNode* de_dfs() { int index = tmp.find(&quot;,&quot;); string cur = &quot;&quot;; if (index &gt; -1) { cur = tmp.substr(0, index); tmp.erase(0, index + 1); } else { //if the last string is not end with &quot;,&quot; cur = tmp; } if(cur == &quot;null&quot; || cur==&quot;&quot;) return nullptr; TreeNode* root = new TreeNode(stoi(cur)); root-&gt;left = de_dfs(); root-&gt;right = de_dfs(); return root; }private: string nodes; string tmp;}; 复杂度：时间O（N）， 空间O（N）","link":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"},{"title":"leetcode-二叉树的最近公共祖先","text":"点击：题目链接：给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。百度百科：最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 思路根据题意，我们可以直接想到数组的后序遍历的特点。先判断它的子节点，最后再判断根节点。 由于题目中节点可能分散在树的各个地方，所以我们要注意以下几个判断条件： 如果一棵子树的两个节点就是所给的节点，则该子树的根节点就是公共祖先 如果一棵子树的其中一个节点是，那就要继续要往上继续判断，同时要标记当前子树根节点是包含所要的节点。 如果子树的根节点和其子节点都是指定的节点，则该根节点也是公共祖先 代码12345678910111213141516171819202122232425262728293031/** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */class Solution {public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) { dfs(root, p, q); return ans; }private: TreeNode* ans; bool dfs(TreeNode* root, TreeNode* p, TreeNode* q) { if (root == nullptr) return false; bool leftNode = dfs(root-&gt;left, p, q); bool rightNode = dfs(root-&gt;right, p, q); if ((leftNode &amp;&amp; rightNode) || ((root-&gt;val == p-&gt;val) || (root-&gt;val == q-&gt;val) &amp;&amp; (leftNode || rightNode))) { ans = root; } return ((leftNode || rightNode) || (root-&gt;val == p-&gt;val) || (root-&gt;val == q-&gt;val)); }}; 复杂度时间O（N），空间 O（N） 思路我们也可以，将指定的节点，带入去扫描树，首先找到其中一个指定节点在树的位置，然后不断找到父节点。然后再找另一个指定点，不断找父节点，若找到一样的点，则该点就是最大公共祖先。 代码123456789101112131415161718192021222324252627282930313233343536class Solution {public: TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) { Nodes[root-&gt;val] = nullptr; dfs(root); while (p) { vis[p-&gt;val] = true; p = Nodes[p-&gt;val]; } while (q) { if (vis[q-&gt;val]) return q; q = Nodes[q-&gt;val]; } return nullptr; }private: TreeNode* ans; map&lt;int, TreeNode*&gt; Nodes; map&lt;int, bool&gt; vis; void dfs(TreeNode* root) { if (root-&gt;left) { Nodes[root-&gt;left-&gt;val] = root; dfs(root-&gt;left); } if (root-&gt;right) { Nodes[root-&gt;right-&gt;val] = root; dfs(root-&gt;right); } }}; 复杂度时间 O(N), 空间用到2N，所以O（N）","link":"/leetcode-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"},{"title":"leetcode-删除二叉搜索树中的节点","text":"点击：题目链接：给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。一般来说，删除节点可分为两个步骤：首先找到需要删除的节点；如果找到了，删除它。说明： 要求算法时间复杂度为 O(h)，h 为树的高度。 思路搜索二叉树的原理：左子树的值永远小于根节点，右子树的值永远大于根节点。 无右子树，遍历左子数中最大的右节点 无左子树，遍历右子树，遵循1 有左子树和右子树，遍历右子树，遵循1 代码12345678910111213141516171819202122class Solution {public: TreeNode* deleteNode(TreeNode* root, int key) { if (!root) return nullptr; else if (key &gt; root-&gt;val) root-&gt;right = deleteNode(root-&gt;right, key); else if (key &lt; root-&gt;val) root-&gt;left = deleteNode(root-&gt;left, key); else { if (root-&gt;right == nullptr) return root-&gt;left; else if (root-&gt;left == nullptr) return root-&gt;right; else { TreeNode* temp = root-&gt;right; while(temp-&gt;left) temp = temp-&gt;left; temp-&gt;left = root-&gt;left; root = root-&gt;right; } } return root; }}; 复杂度：时间：O（log（n）） 空间：O（log(n)）","link":"/leetcode-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"},{"title":"leetcode-剑指offer 53","text":"点击：题目链接：一个长度为n-1的递增排序数组中的所有数字都是唯一的，并且每个数字都在范围0～n-1之内。在范围0～n-1内的n个数字中有且只有一个数字不在该数组中，请找出这个数字。示例 1:输入: [0,1,3]输出: 2示例 2:输入: [0,1,2,3,4,5,6,7,9]输出: 8 思路一读完题目，我们发现几个条件： 该数组是递增有序的 数字只出现一次 只有一个数不再数组内 因此首先我们想到的就是暴力的方法，逐一扫描找出该数 代码1234567891011class Solution {public: int missingNumber(vector&lt;int&gt;&amp; nums) { int tmp = 0; for(int i=0; i&lt;nums.size(); i++){ if(tmp != nums[i]) break; //如果发现不同的就中断当前for循环 tmp++; } return tmp; //返回最终值 }}; 思路二根据暴力的解法，我们发现当低位出现数组下标和元素的值不匹配的时候，那么之后的所有的数都是不匹配的。因此我们可以使用二分法(双指针)。首先查看中值是否符合条件，若不相等右指针缩小范围。若相等，将左指针移动到中值，下一部分的二分之一。 代码12345678910111213class Solution {public: int missingNumber(vector&lt;int&gt;&amp; nums) { int l=0, r=nums.size()-1; int mid; while(l &lt;= r){ mid = (l+r)/2; if(nums[mid] != mid) r= mid-1; //不等，右指针前挪，左指针不动 else l = mid+1; //相等，左指针右挪，右指针不动 } return l; }};","link":"/leetcode-%E5%89%91%E6%8C%87offer%2053/"},{"title":"leetcode-反转链表","text":"点击：题目链接：反转一个单链表。 思路使用迭代的方式，我们可以创建一个尾节点，然后将链表依次改变顺序，最后返回尾节点。 需要注意的是，当我们改变链表前部节点的引用关系时，需要创建一个临时节点来保存它的后面节点 代码12345678910111213141516171819202122/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */class Solution {public: ListNode* reverseList(ListNode* head) { ListNode* tail = NULL; while(head){ ListNode* temp = head-&gt;next; head-&gt;next = tail; tail = head; head = temp; } return tail; }}; 复杂度时间:O(N) 空间:O(1) 思路由于该解题也包含层层递进的关系在里面，我们也可以尝试使用递归的方式。和迭代的方式不同，递归是从尾部节点开始置换。我们需要不断遍历到链表的尾部，然后开始不断层层反转尾部链表。 代码123456789101112class Solution {public: ListNode* reverseList(ListNode* head) { if(head ==NULL || head-&gt;next == NULL){ return head; } ListNode* p = reverseList(head-&gt;next); head-&gt;next-&gt;next = head; head-&gt;next = NULL; return p; }}; 复杂度时间：O（N）， 空间：O(N)","link":"/leetcode-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"},{"title":"leetcode-寻找两个正序数组的中位数","text":"点击：题目链接：给定两个大小分别为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的 中位数 。 思路一种思路就是使用双指针，不断找到大数组的中位数，但是要注意的是，个数有奇偶之分 另一种思路,直接利用中位数： 为了避免奇偶性的判断，我们也可以先将大数组填充为之前的两倍，保证个数肯定是双数。 填充后，两个数组的中位数与大数组的关系就为，center1 +center2 = m+n 使用两个数组的中位数与合并后大数组的关系 l1 &lt; r2 &amp;&amp; l2 &lt; r1, l,r 分别是对应数组的中位数的相邻两个元素 当其中大数组的中位数只出现在一个数组，说明此时另一个数组的数比当前的数组的数都要大或小，临界值可以表示为 center1 == 0, l1 = INT_MAX cetner1 == m, r1 = INT_MIN center2 == 0, l2 = INT_MAX cetner2 == n, r2 = INT_MIN 代码12345678910111213141516171819202122232425262728293031323334class Solution {public: double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) { if(nums1.size() &gt; nums2.size()) return findMedianSortedArrays(nums2, nums1); int n = nums1.size(); int m = nums2.size(); int l1, r1, l2, r2, c1,c2,low = 0, high = 2*n; while(low&lt;=high){ //扩充之后的中位线 c1 = (low+high)/2; c2 = m+n -c1; l1 = (c1 ==0)? INT_MIN:nums1[(c1-1)/2]; r1 = (c1 == 2*n)? INT_MAX: nums1[(c1)/2]; l2 = (c2==0)? INT_MIN:nums2[(c2-1)/2]; r2 = (c2 == 2*m)?INT_MAX:nums2[(c2)/2]; if(l1&gt;r2){ high = c1-1; }else if(l2&gt;r1){ low = c1+1; }else{ break; } } return (max(l1,l2)+ min(r1,r2))/2.0; }}; 复杂度时间O(log(min(m,n))),空间（1）","link":"/leetcode-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"},{"title":"leetcode-寻找两个正序数组的第K大的数","text":"两个正序数组（从小到大）， 找到两个数组的所有元素里的第K大的数。 思路对两个有序数组同时使用二分法，由于是K个，将问题转化为K为了数组的中位数，然后利用中位数的特性，若当前数不满足条件，就舍弃掉之前的所有的元素 代码12345678910111213141516171819class Solution {public: int FindkthNum(vector&lt;int&gt; nums1,int index1, vector&lt;int&gt; nums2, int index2, int K) { if (index1 == nums1.size()) return nums2[index2 + K - 1]; if (index2 == nums2.size()) return nums1[index1 + K - 1]; if (K == 1) return min(nums1[index1], nums2[index2]); //二分的中间值 //判断此时是否超出边界 int mid1 = ((index1 + K/2 - 1) &lt; nums1.size()) ? nums1[index1 + K/2 - 1] : INT_MAX; int mid2 = ((index2 + K/2 - 1) &lt; nums2.size()) ? nums2[index2 + K/2 - 1] : INT_MAX; //对比，然后舍弃掉中位数之前的数 if (mid1 &lt; mid2) return FindkthNum(nums1, index1+K/2, nums2, index2, K - K/2); else return FindkthNum(nums1, index1, nums2, index2 + K/2, K - K/2); }}; 复杂度时间：O（log(m+n)）, 空间O(log(m+n))","link":"/leetcode-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E7%AC%ACK%E5%A4%A7%E7%9A%84%E6%95%B0/"},{"title":"leetcode-岛屿数量","text":"点击：题目链接：给你一个由 ‘1’（陆地）和 ‘0’（水）组成的的二维网格，请你计算网格中岛屿的数量。岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。此外，你可以假设该网格的四条边均被水包围。 思路使用深度优先搜索。然后配合剪枝，即标记已扫描过的陆地。搜索的条件就是一块陆地的上下左右是不是有相连的陆地，如果都没有，则判断该陆地为一座岛，如果有则继续搜索。 由于陆地的默认标记为‘1’， 故我们可以标记已经搜索的陆地为‘2’. 代码12345678910111213141516171819202122232425262728293031323334class Solution {public: int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) { for (int i = 0; i &lt; grid.size(); ++i) { for (int j = 0; j &lt; grid[i].size(); ++j) { if (findIsland(grid, i, j)) { ++count; } } } return count; } bool findIsland(vector&lt;vector&lt;char&gt;&gt;&amp; grid, int indexi, int indexj) { if (indexi == grid.size() || indexi&lt;0) return false; else if (indexj == grid[indexi].size() || indexj&lt;0) return false; if (grid[indexi][indexj] == '0' || grid[indexi][indexj] == '2') return false; grid[indexi][indexj] = '2'; findIsland(grid, indexi+1, indexj); findIsland(grid, indexi, indexj + 1); findIsland(grid, indexi - 1, indexj); findIsland(grid, indexi, indexj - 1); return true; }private: int count = 0;}; 复杂度时间：O（MN）, 空间： O（MN） 思路二使用并查集","link":"/leetcode-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/"},{"title":"leetcode-打乱数组","text":"点击：题目链接：给你一个整数数组 nums ，设计算法来打乱一个没有重复元素的数组。实现 Solution class:Solution(int[] nums) 使用整数数组 nums 初始化对象int[] reset() 重设数组到它的初始状态并返回int[] shuffle() 返回数组随机打乱后的结果 思路提取关键字–打乱。顾名思义，我们要像洗牌一样的“洗数组”。 我们利用标准库的随机函数std::shuffle,随机放置元素后返回“打乱”的数组。 代码123456789101112131415161718192021222324class Solution {public: Solution(vector&lt;int&gt;&amp; nums) { original = nums; this-&gt;nums = nums; } /** Resets the array to its original configuration and return it. */ vector&lt;int&gt; reset() { return original; } /** Returns a random shuffling of the array. */ vector&lt;int&gt; shuffle() { std::random_device rd; std::mt19937 g(rd()); std::shuffle(nums.begin(), nums.end(), g); return nums; }private: vector&lt;int&gt; original; vector&lt;int&gt; nums;}; 细究shuffle的基本实现原理：取当前值，和之前读取过的其中一个值互换位置，已达到随机的目的。 代码1234567vector&lt;int&gt; shuffle() { for(int i = 0; i&lt;nums.size();i++){ int randnum = std::rand() % (original.size()-i); //只和使用过的值互换位置 std::swap(nums[randnum],nums[i]); } return nums;}","link":"/leetcode-%E6%89%93%E4%B9%B1%E6%95%B0%E7%BB%84/"},{"title":"leetcode-括号生成","text":"点击：题目链接：数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。 思路我们可以把一对括号看作一个整体，两个括号之前的组合只有两种放置的方式： 一个包含一个 两两互不包含 因此我们可以推出这个表达式：s = &quot;(&quot; + l + &quot;)&quot;+ r 代码1234567891011121314151617181920212223242526272829303132333435class Solution {public: vector&lt;string&gt; generateParenthesis(int n) { return *generate(n); } //记录n对括号的组合数 shared_ptr &lt; vector&lt;string&gt;&gt; res[100] = {nullptr}; shared_ptr&lt;vector&lt;string&gt;&gt; generate(int n) { if (res[n] != nullptr) return res[n]; //为无括号的情况赋值 if (n == 0) { res[0] = shared_ptr&lt;vector&lt;string&gt;&gt;(new vector&lt;string&gt;{&quot;&quot;}); } else { //创建一个临时数组，记录每次的组合 auto temp = shared_ptr&lt;vector&lt;string&gt;&gt;(new vector&lt;string&gt;); for (int i = 0; i != n; ++i) { auto left = generate(i); auto right = generate(n - i - 1); for (const string&amp; l : *left) { for (const string&amp; r : *right) { temp-&gt;push_back(&quot;(&quot; + l + &quot;)&quot; + r); } } res[n] = temp; } } return res[n]; }}; 复杂度略。。","link":"/leetcode-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"},{"title":"leetcode-排序链表","text":"点击：题目链接：给你链表的头结点 head ，请将其按 升序 排列并返回 排序后的链表 。进阶：你可以在 O(n log n) 时间复杂度和常数级空间复杂度下，对链表进行排序吗？ 思路自定向下，使用快慢指针，不断分治链表然后两两合并。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465class Solution {public: ListNode* sortList(ListNode* head) { return sort(head, nullptr); } ListNode* sort(ListNode* head, ListNode* tail) { if (head == nullptr) return nullptr; if (head-&gt;next == tail) { //若只有两个节点，将其分开 head-&gt;next = nullptr; return head; } ListNode* low = head; ListNode* fast = head; if (fast-&gt;next) fast = fast-&gt;next-&gt;next; while (fast!= tail) { low = low-&gt;next; fast = fast-&gt;next; if (fast!= tail) { fast = fast-&gt;next; } } ListNode* mid = low-&gt;next; return merge(sort(head, mid), sort(mid, tail)); } ListNode* merge(ListNode* node1, ListNode* node2) { ListNode* head = new ListNode(0); ListNode* cur = head; while (node1 &amp;&amp; node2) { ListNode* temp; if (node1-&gt;val &lt; node2-&gt;val) { temp = node1-&gt;next; cur-&gt;next = node1; cur = node1; node1 = temp; } else{ temp = node2-&gt;next; cur-&gt;next = node2; cur = node2; node2 = temp; } } if (!node1) { cur-&gt;next = node2; } else if (!node2) { cur-&gt;next = node1; } return head-&gt;next; }}; 复杂度时间：O（NlogN）, 空间：O（logN） 思路二（拓展）自底向上。 直接两两节点不断比较，再两两合并。 主要注意点一个是择出所需链表节点个数，另一个是在向上合并时要注意成2倍递增 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */class Solution {public: ListNode* sortList(ListNode* head) { ListNode* dummyhead = new ListNode(0); dummyhead-&gt;next = head; ListNode* tmplen = head; int len = 0; while (head) { ++len; head = head-&gt;next; } for (int i = 1; i &lt; len; i&lt;&lt;= 1) { ListNode* cur = dummyhead-&gt;next; ListNode* tail = dummyhead; while (cur) { ListNode* left = cur; ListNode* right = cut(left, i); cur = cut(right, i); ListNode* p = merge(left, right); tail-&gt;next = p; while (tail-&gt;next) { tail = tail-&gt;next; } } } return dummyhead-&gt;next; } ListNode* cut(ListNode* head, int n) { ListNode* p = head; if (n == 0) return p; while (p) { --n; if (n &gt; 0) { p = p-&gt;next; } else { break; } } if (p == nullptr) return nullptr; ListNode* tmp = p-&gt;next; p-&gt;next = nullptr; return tmp; } ListNode* merge(ListNode* l1, ListNode* l2) { ListNode* dummyh = new ListNode(0); ListNode* cur = dummyh; while (l1 &amp;&amp; l2) { if (l1-&gt;val &lt; l2-&gt;val) { cur-&gt;next = l1; cur = l1; l1 = l1-&gt;next; } else { cur-&gt;next = l2; cur = l2; l2 = l2-&gt;next; } } cur-&gt;next = l1 ? l1 : l2; return dummyh-&gt;next; }}; 复杂度时间：O（NlogN）, 空间：O(1)","link":"/leetcode-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"},{"title":"leetcode-数组中的第K个最大元素","text":"点击：题目链接：在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。 思路直接的思路，就是将数组排序好，然后取出第k个最大的数组。这里我们选择快排。时间复杂度最小。 代码123456789101112131415161718192021222324252627class Solution {public: int findKthLargest(vector&lt;int&gt;&amp; nums, int k) { quicksort(nums, 0, nums.size()-1); return nums[nums.size()-k]; } void quicksort(vector&lt;int&gt;&amp; v, int L, int R) { if (L &gt;= R) return; int temp = v[L]; int L_pre = L; int R_pre = R; while (L &lt; R) { while (L&lt;R &amp;&amp; v[R] &gt; temp) --R; v[L] = v[R]; while (L&lt;R &amp;&amp; v[L] &lt;= temp) ++L; v[R] = v[L]; } v[L] = temp; quicksort(v, L_pre, L - 1); quicksort(v, L + 1, R_pre); }}; 复杂度时间：O（nlogn）， 空间，O（n） 思路另一个思路，就是用partition算法。我们可以选择一个数（可随机），然后和剩下的数一一比较，若左边的数大于当前的数，就交换他们，最终保证左边的数都比当前的数小。这样我们可以快速找到我们需要的值，而无须排序好整个数组。 代码123456789101112131415161718192021222324252627282930313233343536373839class Solution {public: int findKthLargest(vector&lt;int&gt;&amp; nums, int k) { if(nums.size() == 1) return nums[0]; int target = nums.size()-k; int L = 0; int R = nums.size()-1; while (1) { int index = partition(nums, L, R); if (index &lt; target) { L = index + 1; } else if (index &gt; target) { R = index - 1; } else { break; } } return nums[target];}int partition(vector&lt;int&gt;&amp; v, int L, int R) { int pivote = v[L]; int j = L; for (int i = j+1; i &lt;= R; ++i) { if (v[i] &lt; pivote) { j++; swap(v[i], v[j]); } } swap(v[j], v[L]); return j;}}; 复杂度时间：O(N), 空间O(1)","link":"/leetcode-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"},{"title":"leetcode-最大子序和","text":"点击：题目链接：给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 思路由题意可知，若连续的数组内，和的值变小，我们就需要重新开始计数。 所以我们可以推出这样一个递推关系，当第i个元素，当前的它的和的最大值取决于时候前面已知的和加上它是否变小，若变小，则从当前元素重新计数，即当前的和为f(i) = num[i],若变大，则当前和为f(i-1)+num[i] 式子可以变为： f(i) = max(num[i], f(i-1)+num[i]) 拓展：由于我们只需要f(i-1),为节省空间（不使用哈希表），我们可以利用滚动数组，将f(i-1)表示为一个变量 代码1234567891011121314class Solution {public: int maxSubArray(vector&lt;int&gt;&amp; nums) { int max_val = nums[0]; int pre_sum = nums[0]; for(int i=1; i&lt;nums.size(); ++i){ pre_sum = max(nums[i], (pre_sum+nums[i])); max_val = max(pre_sum, max_val); } return max_val; }}; 复杂度时间：O(N), 空间O(1)","link":"/leetcode-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/"},{"title":"leetcode-旋转图像","text":"点击：题目链接：给定一个 n × n 的二维矩阵 matrix 表示一个图像。请你将图像顺时针旋转 90 度。 你必须在 原地 旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要 使用另一个矩阵来旋转图像。 思路我们可以通过某一点的转移之后的位置变化，发现当前点的横坐标会变成交换后点的纵坐标，且当前点的纵坐标和交换后点的横坐标相加等于数组长度减一。 代码12345678910111213141516class Solution {public: void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) { int len = matrix.size(); for(int i=0; i&lt;len/2; ++i){ for(int j=0; j&lt;(len+1)/2; ++j){ int temp = matrix[i][j]; matrix[i][j] = matrix[len-1-j][i]; matrix[len-1-j][i] = matrix[len-1-i][len-1-j]; matrix[len-1-i][len-1-j] = matrix[j][len-1-i]; matrix[j][len-1-i] = temp; } } }}; 复杂度时间O（N2）， 空间O（1） 思路我们也可以通过镜面交换数组的位置来达到旋转的目的。由题意我们可以先镜面对折，再斜对角对折。 代码123456789101112131415161718class Solution {public: void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) { int len = matrix.size(); for(int i=0; i&lt;len/2; ++i){ for(int j=0;j&lt;len; ++j ){ swap(matrix[i][j], matrix[len-1-i][j]); } } for(int i = 0; i&lt;len; ++i){ for(int j=i; j&lt;len;++j){ swap(matrix[i][j], matrix[j][i]); } } }}; 复杂度时间O（N2），空间O（1）","link":"/leetcode-%E6%97%8B%E8%BD%AC%E5%9B%BE%E5%83%8F/"},{"title":"leetcode-组合总和","text":"点击：题目链接：给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。candidates 中的数字可以无限制重复被选取。 思路回溯加剪枝 代码12345678910111213141516171819202122232425262728293031class Solution {public: vector&lt;vector&lt;int&gt;&gt; combinationSum(vector&lt;int&gt;&amp; candidates, int target) { vector&lt;int&gt; temp; Backtracking(candidates, temp, 0,target); return res; } void Backtracking(vector&lt;int&gt;&amp; nums, vector&lt;int&gt;&amp; temp, int index, int target){ if (target == 0) { res.push_back(temp); return; } if (target &lt; 0) return; for (int i = index; i &lt; nums.size(); ++i) { temp.push_back(nums[i]); target -= nums[i]; Backtracking(nums, temp, i, target); temp.pop_back(); target += nums[i]; } return; }private: vector&lt;vector&lt;int&gt;&gt; res;}; 复杂度：时间：O（N²），空间O（N）","link":"/leetcode-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/"},{"title":"leetcode-解码方法","text":"点击：题目链接：一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：‘A’ -&gt; 1‘B’ -&gt; 2…‘Z’ -&gt; 26要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，”111” 可以将 “1” 中的每个 “1” 映射为 “A” ，从而得到 “AAA” ，或者可以将 “11” 和 “1”（分别为 “K” 和 “A” ）映射为 “KA” 。注意，”06” 不能映射为 “F” ，因为 “6” 和 “06” 不同。给你一个只含数字的 非空 字符串 num ，请计算并返回 解码 方法的 总数 。题目数据保证答案肯定是一个 32 位 的整数。 思路通常情况，判断当前可以解码的个数需要知道上一个字母的解码总数。如果该数为0， 我还需要结合上一个数，若不符合条件，我们就需要直接判断该字符串是不满足条件的。 边界情况，f(-1) = 1, f(0) = 1 若为0， 则判断前一个数是否为1和2， 若总数为f(i) = f(i-1)，否则字符串不合格 若前一个数为2，则需要需要判断该数是否在1到6，或者前一个数为1，该数无论0到9，若满足条件，则f(i) = f(i-2)+f(i-1) f(i-1) 为分开解码的情况， f(i-2) 为合并后解码的情况 由于这里只涉及到f(i-1)和f(i-2)， 故我们可以用滚动数组进行替代 代码123456789101112131415161718192021class Solution {public: int numDecodings(string s) { if (s[0] == '0') return 0; int pre = 1, cur = 1; for (int i = 1; i &lt; s.size(); ++i) { int temp = cur; if (s[i] == '0') { if (s[i - 1] == '1' || s[i - 1] == '2') cur = pre; else return 0; } else if ((s[i - 1] == '1' || (s[i - 1] == '2') &amp;&amp; (s[i] &gt; '0' &amp;&amp; s[i] &lt; '7'))) cur = cur+pre; pre = temp; } return cur; }}; 复杂度时间：O(N), 空间：O（1）","link":"/leetcode-%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/"},{"title":"leetcode-课程表","text":"点击：题目链接：你这个学期必须选修 numCourses 门课程，记为 0 到 numCourses - 1 。在选修某些课程之前需要一些先修课程。 先修课程按数组 prerequisites 给出，其中 prerequisites[i] = [ai, bi] ，表示如果要学习课程 ai 则 必须 先学习课程 bi 。例如，先修课程对 [0, 1] 表示：想要学习课程 0 ，你需要先完成课程 1 。请你判断是否可能完成所有课程的学习？如果可以，返回 true ；否则，返回 false 。 思路该题用的是有向图的拓扑排序。 主要的算法逻辑顺序： 找到所有没有入度的节点 移除这些节点的所有出度，同时与之有关联的出度的节点，他们的入度减一。同时记录移除的节点个数 重复2，直到无满足条件的节点 对比记录的移除的个数，是否与原有向图节点个数相等，若不等，则有环 代码1234567891011121314151617181920212223242526272829303132333435363738class Solution {public: bool canFinish(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) { vector&lt;vector&lt;int&gt;&gt; edge; edge.resize(numCourses); vector&lt;int&gt; inedge = vector&lt;int&gt;(numCourses); for(auto info:prerequisites){ edge[info[1]].push_back(info[0]); ++inedge[info[0]]; } queue&lt;int&gt; q; for(int i=0; i&lt; edge.size(); i++){ if(inedge[i] == 0){ q.push(i); } } int visited = 0; while(!q.empty()){ ++visited; int u = q.front(); q.pop(); for(int v:edge[u]){ --inedge[v]; if(inedge[v] == 0){ q.push(v); } } } return visited==numCourses; }}; 复杂度时间O（m+n），空间O(m+n)","link":"/leetcode-%E8%AF%BE%E7%A8%8B%E8%A1%A8/"},{"title":"leetcode-链表深度拷贝","text":"点击：题目链接：请实现 copyRandomList 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 next 指针指向下一个节点，还有一个 random 指针指向链表中的任意节点或者 null。 思路链表拷贝有两种，浅层拷贝和深度拷贝。浅层拷贝—拷贝后的链表和之前的共享同一内存，即仍指向同一份next链表深度拷贝—重新申请内存来放置拷贝后的链表 故我们可以直接使用一个map表一一保存每个结点，再进行拷贝复制每个结点的关系。 代码12345678910111213141516171819202122232425262728293031323334class Node {public: int val; Node* next; Node* random; Node(int _val) { val = _val; next = NULL; random = NULL; }};class Solution {public: Node* copyRandomList(Node* head) { Node* cur = new Node(0); cur = head; unordered_map&lt;Node*, Node*&gt; hash; while(cur != nullptr){ //将每个结点一一对应存入哈希表 hash[cur] = new Node(cur-&gt;val); cur = cur-&gt;next; } cur = head; while(cur != nullptr){ //拷贝每个节点的对应关系 hash[cur]-&gt;next = hash[cur-&gt;next]; hash[cur]-&gt;random = hash[cur-&gt;random]; cur = cur-&gt;next; } return hash[head]; }}; 小总结读题的时候一定要确切的明白题意。比如这道，刚读完，我一直以为要自己来决定结点之间的随即关系（浪费了比较长的时间后感觉不对劲）。结果只需要复制原来的。","link":"/leetcode-%E9%93%BE%E8%A1%A8%E6%B7%B1%E5%BA%A6%E6%8B%B7%E8%B4%9D/"},{"title":"乔布斯斯坦福大学毕业典礼演讲","text":"最近在练口语，网上搜了很多教程，试了几个都不是很适合我（或许是坚持不下来）。最后还是打算读读名人的演讲稿，练习口语的时候还能练练词汇语法和口才。 正文I am honored to be with you today at your commencement from one of the finest universities in the world. I never graduated from college. Truth be told, this is the closest I’ve ever gotten to a college graduation. Today I want to tell you three stories from my life. That’s it. No big deal. Just three stories. 我很荣幸今天在世界上最好的大学参见你们的毕业典礼。但是我没有从大学毕业过。老实说，这是我里大学毕业最近的一次。今天我想跟你们讲三个我生命中的故事。没有关系，不是什么大事，只是三个故事。 The first story is about connecting the dots. 第一个故事是关于联系每个点。 I dropped out of Reed College after the first 6 months, but then stayed around as a drop-in for another 18 months or so before I really quit. So why did I drop out? 我在开学的第六个月，从里德学院辍学， 但之后大概在我真正退学的时候，我却以入学生的身份额外带了18个月，所以为什么我要辍学？ It started before I was born. My biological mother was a young, unwed college graduate student, and lingshe decided to put me up for adoption. She felt very strongly that I should be adopted by college graduates, so everything was all set for me to be adopted at birth by a lawyer and his wife. Except that when I popped out they decided at the last minute that they really wanted a girl. So my parents, who were on a waiting list, got a call in the middle of the night asking: “We have an unexpected baby boy; do you want him?” They said: “Of course.” My biological mother later found out that my mother had never graduated from college and that my father had never graduated from high school. She refused to sign the final adoption papers. She only a few months later when my parents promised that I would someday go to college. 这要从我出生前开始。 我生物学母亲是一个没有结婚的年轻的大学毕业生，她决定通过把我放入领养机构。她非常强势的坚持我必须由大学毕业的家庭来领养，所以在我出生的时候所有的事情就由一个律师和他的妻子管理。意外的是，在我出生的时候，他们在最后还是想要一个女孩。因此，本来在等待清单的我的养父母，在半夜接到了一个电话：我们有一个意外的男婴，你想要他吗？ 他们说： 当然。 我的生物学母亲之后发现我的母亲没有从大学毕业，并且我的父亲没有从高中毕业。她拒绝在最后收养协议上签字。几个月后，我的父母承诺说一定会让我上大学，她只好妥协。 And 17 years later I did go to college. But I naively chose a college that was almost as expensive as Stanford, and all of my working-class parents’ savings were being spent on my college tuition. After six months, I couldn’t see the value in it. I had no idea what I wanted to do with my life and no idea how college was going to help me figure it out. And here I was spending all of the money my parents had saved their entire life. So I decided to drop out and trust that it would all work out OK. It was pretty scary at the time, but looking back it was one of the best decisions I ever made. The minute I dropped out I could stop taking the required classes that didn’t interest me, and begin dropping in on the ones that looked interesting. 17年后我真的上了大学。但是我天真的选择一个学费几乎和斯坦福一样贵的大学， 并且我父母的所有工作的积蓄都被用到了我大学的费用。六个月后，我看不到任何上大学的意义。我不知道我在我之后生命中想要做什么，并且不知道大学将如何帮我指明方向。并且在这，我花了我父母他们用一辈子存的钱。因此我决定辍学并且坚信所有都会变好。当时我还是会很害怕，但是现在回顾它，他是确实我做过的最好的决定。我辍学的期间我可以停止上那些我不感兴趣但是必须的课程，同时开始学习看起来有趣的课程。 It wasn’t all romantic. I didn’t have a dorm room, so I slept on the floor in friends’ rooms, I returned coke bottles for the 5¢ deposits to buy food with, and I would walk the 7 miles across town every Sunday night to get one good meal a week at the Hare Krishna temple. I loved it. And much of what I stumbled into by following my curiosity and intuition turned out to be priceless later on. Let me give you one example: 他不是所有都是具有浪漫色彩的。我没有宿舍，因此我睡在我朋友房间的地上， 我通过卖5分一个可乐瓶来买食物，我会每周六晚上走7英里到Hare Krishna 神庙，吃上一顿一周内最好的一顿饭。我很喜欢它。我遭受的大多数事情都是跟随我的好奇心和直觉，这些以后都是无价的。让我给你举个例子： Reed College at that time offered perhaps the best calligraphy instruction in the country. Throughout the campus every poster, every label on every drawer, was beautifully hand calligraphed. Because I had dropped out and didn’t have to take the normal classes, I decided to take a calligraphy class to learn how to do this. I learned about serif and san serif typefaces, about varying the amount of space between different letter combinations, about what makes great typography great. It was beautiful, historical, artistically subtle in a way that science can’t capture, and I found it fascinating. 在那个时候，里德学院提供了可能是这个国家最好的书法课程。遍布校园内的每一个黑板报，每个画作上的签名，都是漂亮的手写书法字体。因为我辍学并且不用学普通的课程，我决定上一个书法课来学习怎么做到这样。我学习了细字和衬线体，学习了改变不同字符组合之间的空格，学习了使字体变得更棒，我发现它非常有吸引力。 None of this had even a hope of any practical application in my life. But ten years later, when we were designing the first Macintosh computer, it all came back to me. And we designed it all into the Mac. It was the first computer with beautiful typography. If I had never dropped in on that single course in college, the Mac would have never had multiple typefaces or proportionally spaced fonts. And since Windows just copied the Mac, it’s likely that no personal computer would have them. If I had never dropped out, I would have never dropped in on this calligraphy class, and personal computers might not have the wonderful typography that they do. Of course it was impossible to connect the dots looking forward when I was in college. But it was very, very clear looking backwards ten years later. 这些在我的生命中没有一个是有实际用途的。但是十年后，当我们设计第一台MAC电脑的时候，它启发了我。我们把它都涉及到了MAC里面。这是第一台拥有漂亮字体的电脑。如果我从没有在大学上那个单个课程，MAC将不会有大量的字体或者按比例间隔的字体。同时要不是windows抄袭了MAC，可能没有一台个人电脑会拥有他们。如果我没有辍学，我就不会上那节字体课，同时他们生产的个人电脑可能不会有完美的字体。 当然在我上大学的时候是联系到未来的这些点滴。但在十年后，回想起来它友视非常非常清晰。 Again, you can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something - your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life. 再次，又不能预见以后的事情；你只能通过回忆联系他们。因此你必须相信这些点滴将会在某个时候联系着你的未来。你不得不相信-你的本能，命运，生活，因果，无论什么。这个方法从没让我放弃，它让我生命中所有事情都变的不同。 My second story is about love and loss. I was lucky - I found what I loved to do early in life. Woz and I started Apple in my parents garage when I was 20. We worked hard, and in 10 years Apple had grown from just the two of us in a garage into a $2 billion company with over 4000 employees. We had just released our finest creation - the Macintosh - a year earlier, and I had just turned 30. And then I got fired. How can you get fired from a company you started? Well, as Apple grew we hired someone who I thought was very talented to run the company with me, and for the first year or so things went well. But then our visions of the future began to diverge and eventually we had a falling out. When we did, our Board of Directors sided with him. So at 30 I was out. And very publicly out. What had been the focus of my entire adult life was gone, and it was devastating. I really didn’t know what to do for a few months. I felt that I had let the previous generation of entrepreneurs down - that I had dropped the baton as it was being passed to me. I met with David Packard and Bob Noyce and tried to apologize for screwing up so badly. I was a very public failure, and I even thought about running away from the valley. But something slowly began to dawn on me - I still loved what I did. The turn of events at Apple had not changed that one bit. I had been rejected, but I was still in love. And so I decided to start over. I didn’t see it then, but it turned out that getting fired from Apple was the best thing that could have ever happened to me. The heaviness of being successful was replaced by the lightness of being a beginner again, less sure about everything. It freed me to enter one of the most creative periods of my life. During the next five years, I started a company named NeXT, another company named Pixar, and fell in love with an amazing woman who would become my wife. Pixar went on to create the worlds first computer animated feature film, Toy Story, and is now the most successful animation studio in the world. In a remarkable turn of events, Apple bought NeXT, I returned to Apple, and the technology we developed at NeXT is at the heart of Apple’s current renaissance. And Laurene and I have a wonderful family together. I’m pretty sure none of this would have happened if I hadn’t been fired from Apple. It was awful tasting medicine, but I guess the patient needed it. Sometimes life hits you in the head with a brick. Don’t lose faith. I’m convinced that the only thing that kept me going was that I loved what I did. You’ve got to find what you love. And that is as true for your work as it is for your lovers. Your work is going to fill a large part of your life, and the only way to be truly satisfied is to do what you believe is great work. And the only way to do great work is to love what you do. If you haven’t found it yet, keep looking. Don’t settle. As with all matters of the heart, you’ll know when you find it. And, like any great relationship, it just gets better and better as the years roll on. So keep looking until you find it. Don’t settle. My third story is about death. When I was 17, I read a quote that went something like: “If you live each day as if it was your last, someday you’ll most certainly be right.” It made an impression on me, and since then, for the past 33 years, I have looked in the mirror every morning and asked myself: “If today were the last day of my life, would I want to do what I am about to do today?” And whenever the answer has been “No” for too many days in a row, I know I need to change something. Remembering that I’ll be dead soon is the most important tool I’ve ever encountered to help me make the big choices in life. Because almost everything - all external expectations, all pride, all fear of embarrassment or failure - these things just fall away in the face of death, leaving only what is truly important. Remembering that you are going to die is the best way I know to avoid the trap of thinking you have something to lose. You are already naked. There is no reason not to follow your heart. About a year ago I was diagnosed with cancer. I had a scan at 7:30 in the morning, and it clearly showed a tumor on my pancreas. I didn’t even know what a pancreas was. The doctors told me this was almost certainly a type of cancer that is incurable, and that I should expect to live no longer than three to six months. My doctor advised me to go home and get my affairs in order, which is doctor’s code for prepare to die. It means to try to tell your kids everything you thought you’d have the next 10 years to tell them in just a few months. It means to make sure everything is buttoned up so that it will be as easy as possible for your family. It means to say your goodbyes. I lived with that diagnosis all day. Later that evening I had a biopsy, where they stuck an endoscope down my throat, through my stomach and into my intestines, put a needle into my pancreas and got a few cells from the tumor. I was sedated, but my wife, who was there, told me that when they viewed the cells under a microscope the doctors started crying because it turned out to be a very rare form of pancreatic cancer that is curable with surgery. I had the surgery and I’m fine now. This was the closest I’ve been to facing death, and I hope it’s the closest I get for a few more decades. Having lived through it, I can now say this to you with a bit more certainty than when death was a useful but purely intellectual concept: No one wants to die. Even people who want to go to heaven don’t want to die to get there. And yet death is the destination we all share. No one has ever escaped it. And that is as it should be, because Death is very likely the single best invention of Life. It is Life’s change agent. It clears out the old to make way for the new. Right now the new is you, but someday not too long from now, you will gradually become the old and be cleared away. Sorry to be so dramatic, but it is quite true. Your time is limited, so don’t waste it living someone else’s life. Don’t be trapped by dogma - which is living with the results of other people’s thinking. Don’t let the noise of others’ opinions drown out your own inner voice. And most important, have the courage to follow your heart and intuition. They somehow already know what you truly want to become. Everything else is secondary. When I was young, there was an amazing publication called The Whole Earth Catalog, which was one of the bibles of my generation. It was created by a fellow named Stewart Brand not far from here in Menlo Park, and he brought it to life with his poetic touch. This was in the late 1960’s, before personal computers and desktop publishing, so it was all made with typewriters, scissors, and polaroid cameras. It was sort of like Google in paperback form, 35 years before Google came along: it was idealistic, and overflowing with neat tools and great notions. Stewart and his team put out several issues of The Whole Earth Catalog, and then when it had run its course, they put out a final issue. It was the mid-1970s, and I was your age. On the back cover of their final issue was a photograph of an early morning country road, the kind you might find yourself hitchhiking on if you were so adventurous. Beneath it were the words: “Stay Hungry. Stay Foolish.” It was their farewell message as they signed off. Stay Hungry. Stay Foolish. And I have always wished that for myself. And now, as you graduate to begin anew, I wish that for you. Stay Hungry. Stay Foolish. Thank you all very much.","link":"/%E4%B9%94%E5%B8%83%E6%96%AF%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6%E6%AF%95%E4%B8%9A%E5%85%B8%E7%A4%BC%E6%BC%94%E8%AE%B2/"},{"title":"leetcode-验证IP地址","text":"点击：题目链接：编写一个函数来验证输入的字符串是否是有效的 IPv4 或 IPv6 地址。如果是有效的 IPv4 地址，返回 “IPv4” ；如果是有效的 IPv6 地址，返回 “IPv6” ；如果不是上述类型的 IP 地址，返回 “Neither” 。IPv4 地址由十进制数和点来表示，每个地址包含 4 个十进制数，其范围为 0 - 255， 用(“.”)分割。比如，172.16.254.1；同时，IPv4 地址内的数不会以 0 开头。比如，地址 172.16.254.01 是不合法的。IPv6 地址由 8 组 16 进制的数字来表示，每组表示 16 比特。这些组数字通过 (“:”)分割。比如，2001:0db8:85a3:0000:0000:8a2e:0370:7334 是一个有效的地址。而且，我们可以加入一些以 0 开头的数字，字母可以使用大写，也可以是小写。所以， 2001:db8:85a3:0:0:8A2E:0370:7334 也是一个有效的 IPv6 address地址 (即，忽略 0 开头，忽略大小写)。然而，我们不能因为某个组的值为 0，而使用一个空的组，以至于出现 (::) 的情况。 比如， 2001:0db8:85a3::8A2E:0370:7334 是无效的 IPv6 地址。同时，在 IPv6 地址中，多余的 0 也是不被允许的。比如， 02001:0db8:85a3:0000:0000:8a2e:0370:7334 是无效的。 思路处理字符串的题目。需要额外地注意多种边界情况。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687class Solution {public: string validIPAddress(string IP) { int space = 0; while (space != IP.npos) { space = IP.find(&quot; &quot;); if (space != IP.npos) IP.erase(space, 1); } if (IP.empty()) return &quot;Neither&quot;; if (IP[IP.size() - 1] == '.' || IP[IP.size() - 1] == ':') return &quot;Neither&quot;; if (isIPV4(IP)) { return &quot;IPv4&quot;; } if (isIPV6(IP)) { return &quot;IPv6&quot;; } return &quot;Neither&quot;; } bool isIPV4(string IP) { int count = 0; while (!IP.empty()) { ++count; int index = IP.find(&quot;.&quot;); string temp; if (index == -1) { temp = IP; IP.erase(0, temp.size()); } else { temp = IP.substr(0, index); IP.erase(0, index + 1); } if ((temp.size()!= 1 &amp;&amp; temp[0] == '0')|| temp.size()&gt;3) return false; if (temp == &quot;&quot;) return false; for (auto a : temp) { if (!(a &gt;= '0' &amp;&amp; a &lt;= '9') ) return false; } if (!(stoi(temp) &gt;= 0 &amp;&amp; stoi(temp) &lt;= 255)) return false; } if (count != 4) return false; return true; } bool isIPV6(string IP) { int count = 0; while (!IP.empty()) { ++count; int index = IP.find(&quot;:&quot;); string temp; if (index == IP.npos) { temp = IP; IP.erase(0, temp.size()); } else { temp = IP.substr(0, index); IP.erase(0, index + 1); } if (temp.size() &gt; 4 || temp == &quot;&quot;) return false; for (auto a : temp) { if (!((a &lt;= 'f' &amp;&amp; a &gt;= 'a') || (a &lt;= 'F' &amp;&amp; a &gt;= 'A') || (a &lt;= '9' &amp;&amp; a &gt;= '0'))) { return false; } } } if (count != 8) return false; return true; }}; 思路可以直接使用正则表达式，方便快捷 代码1//待更新","link":"/leetcode-%E9%AA%8C%E8%AF%81IP%E5%9C%B0%E5%9D%80/"},{"title":"基础数据结构复习-动态规划","text":"温故而知新。基础虽然简单，但是万变的根本。 12345678910/*动态规划经典问题汇总# 最大连续子序列和# 最长不下降子序列（LIS）# 最长公共子序列 （LCS）# 最长回文子串 # DAG最长路# 背包 ## 01背包 ## 完全背包*/ 最大连续子序列和 问题描述： 给定数字序列A1….An(无大小序且有正负值), 求Ai+…+Aj最大，输出最大值 思路：从题意中可以感觉，这个题有点移动窗口的味道，但是窗口大小是不固定的。提取一些关键词，子序列是连续的，求和。我们可以考虑算出每种情况的值作比较但是计算每种情况时，我们可能会产生重复计算前一个序列和（这正是动态规划所要消去的）在每次求和中，每次求和时，若之前的数的最大的和加上当前的值小于当前值时，我们就要舍弃之前的和，从当前值重新计算故我们可以推断出这个状态方程式 f(i) = max(f(i-1)+a[i], a[i]) 复杂度：由于比较了N次，故时间O(N)，同时我们也用了一个数组来存放值（用双指针的话，就没有空间复杂度了），故空间为O(N); 12345678910111213141516171819202122template&lt;typename T&gt; T LCSS(vector&lt;T&gt; v) { int len = v.size(); vector&lt;T&gt; dp(len); dp[0] = v[0]; for (int i = 1; i &lt; len; ++i) { //状态转移方程 dp[i] = max(dp[i - 1]+v[i], v[i]); } T max = dp[0]; for (int i = 1; i &lt; len; ++i) { //寻找dp中的最大值(可以合并到上一个for循环里) if (dp[i] &gt; max) { max = dp[i]; } } return max;} 最长不下降子序列（LIS） 问题描述：在一个序列中，找到一个最长的子序列（可以不连续），使得这个子序列是不下降（非递减）的 思路：首先我们提取一些关键字，最长不连续的子序列，要呈递减 那我们需要遍历数组内的值，然后和之前形成的序列进行对比，如果当前值比之前的序列小了，就从一开始重新开始计数 这里面我涉及到的重复操作，就是重复判断了是否和之前已有最长序列形成最长序列。 故我们推断出这个状态方程式 f(i) = max(1, f(j)+1), i表示元素为结尾要记录的序列长度，j表示之前已知的序列长度 复杂度：由于我们遍历原序列，同时要和之前的dp数组内已有的值进行对比，故时间O(N2)，空间为O(N) 12345678910111213141516171819template&lt;typename T&gt; int LIS(vector&lt;T&gt; v) { int len = v.size(); vector&lt;T&gt; dp(len); int res = -1; for (int i = 0; i &lt; len; ++i) { dp[i] = 1; for (int j = 0; j &lt; i; ++j) { //保证当前值大于之前的每个值，更新最大子序列长度 if (v[i] &gt;= v[j] &amp;&amp; (dp[j] + 1 &gt; dp[i])) { dp[i] = dp[j] + 1; } } res = max(res, dp[i]); } return res;} 最长公共子序列 （LCS） 问题描述： 给定两个字符串（或数字序列）A和B，求一个字符串，使得这个字符串是A和B的最长公共部分（子序列可以不连续） 思路：提取关键字：最长公共部分，可以是不连续的同样的，我们需要遍历两个序列，然后以其中一种序列为基准不断地去对比另外一个序列这里面涉及到的重复操作，就是我们总会不断去比较之前比过的元素，换言之就是重新将新元素与旧元素重新拼起来，再去找对应的公共部分故，我们需要保存之前对比过最大公共部分，我们可以创建dp[i][j]-&gt; 截止序列1中第i个元素和截止序列2中第j个元素（注意它们可以不相等，不要先入为主）当第i个元素和第j和元素，相等，我们得出：dp[i][j] = dp[i-1][j-1]+1;若不等（两个同时加入新元素不等），我们只需要继承之前的公共部分，这时候要比较两种情况，只有序列1加入一个新元素的公共部分和只有序列2加入了一个新元素的公共部分哪个长，然后我们取其长就可以了由此可得转换表达式：dp[i][j] = max(dp[i][j-1], dp[i][j-1]) 复杂度：比较两个序列，时间复杂度：O(NM), 空间复杂度：O(NM) 12345678910111213141516171819202122232425262728293031323334template&lt;typename T1&gt;int LCS(T1 s1, T1 s2) { int len1 = s1.size(); int len2 = s2.size(); vector&lt;vector&lt;int&gt;&gt; dp = vector&lt;vector&lt;int&gt;&gt;(len1, vector&lt;int&gt;(len2)); //边界处初始化 for (int i = 0; i &lt; len1; ++i) { if (s1[i] == s2[0]) dp[i][0] = 1; else dp[i][0] = 0; } for (int i = 0; i &lt; len2; ++i) { if (s1[0] == s2[i]) dp[0][i] = 1; else dp[0][i] = 0; } //状态方程 for (int i = 1; i &lt; len1; ++i) { for (int j = 1; j &lt; len2; ++j) { if (s1[i] != s2[j]) { dp[i][j] = max(dp[i - 1][j], dp[i][j-1]); } else { dp[i][j] = dp[i - 1][j - 1] + 1; } } } return dp[len1-1][len2-1];} 最长回文子串 问题描述：给出一个字符串S，求S的最长回文字串的长度 思路：提取关键字：最长回文，（隐藏条件：连续） 一般情况，当我们不断提取字串时，我们要不停的对新子串进行判断。 这时我们会发现，如果新字串的两头相等，且除去两头的中间部分是回文的话，那么这个字串就是回文，反之，则不是 所以我们可以得到这样状态方程，若相等且中间部分是回文：dp[i][j] = dp[i+1][j-1] +2；若不等，dp[i][j] = 1; 复杂度：由于要遍历一次序列，且改变字串长度后又要重新遍历序列，故时间O(N2), 空间，O(N2) 12345678910111213141516171819202122232425template&lt;typename T&gt; int LCS(T s) { int len = s.size(); vector&lt;vector&lt;int&gt;&gt; dp = vector&lt;vector&lt;int&gt;&gt;(len, vector&lt;int&gt;(len)); //边界初始化,对角线的回文长度都为1 for (int i = 0; i &lt; len; ++i) { dp[i][i] = 1; } int max = -1; //状态转移 for (int i = 1; i &lt; len; ++i) { for (int j = 0; j+i &lt; len; ++j) { if (s[j] == s[j+i]) { dp[j][j+i] = dp[j+ 1][j +i- 1] + 2; max = max &gt; dp[j][j + i] ? max : dp[j][j + i]; } else { dp[j][j+i] = 1; } } } return max;} DAG最长路 问题描述：给定一个有向无环图，求出路径和最大的那一条 思路: 提取关键字： 有向无环图， 路径和最大因此我们需要记录每个点到终点的权值和，且保存该点最大的一条路径 123456789101112131415int DAG(int i) { if (dp[i] &gt; 0) return dp[i]; //若发现该点有值，就退出递归，返回该值 for (int j = 0; j &lt; n; ++j) { if (G[i][j] != 0) { //G[][]为邻接矩阵， int temp = DAG(i) + Gp[i][j]); //计算当前点到后续下一个结点的最大值 if (temp &gt; dp[i]) { dp[i] = temp; //若值大，更新dp和当前结点的路线 choice[i] = j; } } } return dp[i];} 01背包 问题：有n件物品，每件物品重w[i], 价格为c[i]。现在有一个容量为v的背包，问如何选取物品放入背包，使得背包内物品的总价值最大。其中每种物品都只有一件。 思路：提取关键字，每个物品只有一件， 总价值最大通常情况，我们要不断尝试放物品进，然后不停试它的临界值并使价值可以达到最大。为了省去重复的计算，我需要记录下每种容量下的价值和。这时我们可以发现，若当我们不放一个物件，那说明当前背包就是当前最大容量，那么当前总价值就为最大值。若放了它，那说明当前背包在没放这个物件的情况下，总价值就为最大。故我们可以这样表示状态方程：dp[i][v] = max(dp[i - 1][v], dp[i - 1][v - w[i]] + c[i]) 复杂度：由于要遍历两次数组，故时间复杂度O(NM), 空间复杂度：#1, O(NM), #2, O(N) 1234567891011121314151617181920212223242526272829template&lt;typename T1, typename T2&gt; T2 bag_01(int n, vector&lt;T1&gt; w, vector&lt;T2&gt; c, T1 V) { //vector&lt;vector&lt;T1&gt;&gt; dp = vector&lt;vector&lt;int&gt;&gt;(n, vector&lt;T1&gt;(V+1)); // ////边界初始化 //dp[0][w[0]] = c[0]; //T2 max_val = c[0]; ////状态方程 //for (int i = 1; i &lt; n; ++i) { // for (int v = w[i]; v &lt;= V; ++v) { // dp[i][v] = max(dp[i - 1][v], dp[i - 1][v - w[i]] + c[i]); // max_val = max(max_val, dp[i][v]); // } //} //使用滚动数组(逆序) vector&lt;T1&gt; dp(V + 1); T2 max_val = c[0]; //状态方程 for (int i = 0; i &lt; n; ++i) { for (int v = V; v &gt;= w[i]; --v) { dp[v] = max(dp[v], dp[v - w[i]] + c[i]); max_val = max(max_val, dp[v]); } } return max_val;} 完全背包完全背包和01背包类似，但是不同点是它的一种物品可以有多个。故当我们决定放第i个物品时，我们可以继续放入该物品，所以不用考虑之前的情况 123456789101112131415161718192021222324252627template&lt;typename T1, typename T2&gt; int bag_full(int n, vector&lt;T1&gt; w, vector&lt;T2&gt; c, T1 V) { vector&lt;vector&lt;T1&gt;&gt; dp = vector&lt;vector&lt;T1&gt;&gt;(n, vector&lt;int&gt;(V + 1)); dp[0][w[0]] = c[0]; T2 max_val = c[0]; for (int i = 1; i &lt; n; ++i) { for (int v = w[i]; v &lt;= V; ++v) { dp[i][v] = max(dp[i - 1][v], dp[i][v - w[i]] + c[i]); max_val = max(max_val, dp[i][v]); } } //使用滚动数组(正序) //vector&lt;T1&gt; dp(V + 1); //T2 max_val = c[0]; ////状态方程 //for (int i = 0; i &lt; n; ++i) { // for (int v = V; v &gt;= w[i]; --v) { // dp[v] = max(dp[v], dp[v - w[i]] + c[i]); // max_val = max(max_val, dp[v]); // } //} return max_val;}","link":"/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"title":"博客创立感想","text":"去年的刚接触hexo这类静态博客的时候，觉得很新奇，跟着网上的教学创建了一个，折腾了些时间。上传了一篇C++学习的笔记，之后就似乎淡忘了它，直到公司因微软policy的要求，要清空所有个人在公司登录过的github上的库，才突然想起它。不由的感觉自己做事还是会有点三分钟热度。 删掉了之前的博客库后，隔了段时间，发现这个对于面试也会是一个加分项。出于这一十分“ 功利 ”的目的，最后决定把它好好发展成具有自己特色和需求的个人空间站和树洞。 之后好好维护，好好拓充它。 自勉。","link":"/%E5%8D%9A%E5%AE%A2%E5%88%9B%E7%AB%8B%E6%84%9F%E6%83%B3/"},{"title":"基础数据结构复习-排序","text":"温故而知新。基础虽然简单，但是万变的根本。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206namespace N { class sort { public: /// &lt;summary&gt; /// 交换两个数 /// &lt;/summary&gt; template&lt;typename T&gt; void swap(T&amp; a, T&amp; b) { T temp = a; a = b; b = temp; }; /// &lt;summary&gt; /// 冒泡排序：比较每个集合内最小的数字，通过两两交换不断把最小的数移到集合最左端，然后从头开始重复寻找第二个最小的数 /// 第一次排序要 N 次比较，然后再寻找的，需要再重复 N-1 次，故我们可以用两个for循环,第二个for循环设置动态边界（即不需要再比较左边最小的数） /// 复杂度：时间: O(N*N),极端情况，集合顺序正好与需要的顺序相反; 空间:O(1), 没有额外的空间，仅有一个临时变量，可以忽略不计 /// &lt;/summary&gt; template&lt;typename T&gt; void Bubblesort(vector&lt;T&gt;&amp; t) { int len = t.size(); for (int i = 0; i &lt; len; ++i) { for (int j = len - 1; j &gt; i; --j) { if (t[j - 1] &gt; t[j]) { swap(t[j - 1], t[j]); } } } }; /// &lt;summary&gt; /// 选择排序：找出数组内最小的数，然后将其按照所需顺序放在指定的位置 /// 我们需要不断遍历整个数组来寻找最小的数，若数组长度为N，则要遍历 (N-1)+(N-2).....+1 /// 复杂度： 时间:O((N*N)/2), 空间：O(1) /// 相较于冒泡来说，不需要每次比较都去交换位置。但仍比较暴力 /// &lt;/summary&gt; template&lt;typename T&gt; void Selectionsort(vector&lt;T&gt;&amp; t) { int len = t.size(); int min; T val; for (int i = 0; i &lt; len - 1; ++i) { min = i; val = t[i]; for (int j = i + 1; j &lt; len; ++j) { if (val &gt; t[j]) { min = j; val = t[j]; } } swap(t[i], t[min]); } } /// &lt;summary&gt; /// 插入排序: 指定一个有序的集合（若无，可以随机放置一个到该集合），然后用之后为排序的数与该集合进行对比，再进行插入的操作 /// 与冒泡和选择类似，都需要遍历两次， /// 复杂度：时间: O((N*N)/2), 空间：O(1) /// 这个相较于冒泡和选择，有了一些改良。减少了一些重复的比较操作 /// &lt;/summary&gt; template&lt;typename T&gt; void Insertsort(vector&lt;T&gt;&amp; t) { int len = t.size(); for (int i = 1; i &lt; len; ++i) { for (int j = i; j &gt; 0; --j) { if (t[j - 1] &gt; t[j]) { swap(t[j - 1], t[j]); } else { break; } } } } /// &lt;summary&gt; /// 堆排序: 根据完全二叉树结点序列连续的特性（从上到下，从左到右）， 将数组中的元素与之对应找出最小最大值。 /// 时间复杂度：由于其需要不断调整堆，且调整一次堆所需时间为logn, 故最坏的情况需要n个数据时，需要O(n*logn)。 /// &lt;/summary&gt; template&lt;typename T&gt; void HeapSort(vector&lt;T&gt;&amp; v, int i) { buildheap(v, 0); int len = v.size(); int lastnode = len - 1; //为取出顶，将其与最后一个结点互换位置，然后将它择出，对剩余结点进行heapify，然后重复以上操作 for (i = lastnode; i &gt; 0; --i) { swap(v[0], v[i]); Heapify(v, i, 0); } } /// &lt;summary&gt; /// 归并排序：将整个序列不断划分到最小单元，进行排序，然后再不断升级原来的大数组进行排序。直接的思想的就是会用到递归。 /// 复杂度：由于要层层递归，故递归的时间时logn, 且每层的时间为n， 故总时间复杂度为O(nlogn) /// &lt;/summary&gt; template&lt;typename T&gt; void Groupsort(vector&lt;T&gt;&amp; t, int L, int R) { if (L == R) return; int mid = (L + R) / 2; Groupsort(t, L, mid); Groupsort(t, mid + 1, R); _GroupSort(t, L, mid+1, R); } /// &lt;summary&gt; /// 快速排序：选一个标准，然后对比，小的放一边，大的放一边，然后再快速排序小的一堆和大的一堆。 /// 提示：当选择数组内某个值当标准时，我们可以将它提取出来利于我们后续对原有数组进行重新排序 /// 复杂度：由于用到递归，且每次递归都要进行n-1次比较，故复杂度为O(nlogn) /// &lt;/summary&gt; template&lt;typename T&gt; void QuickSort(vector&lt;T&gt;&amp; v, int L, int R) { T pivot = v[L]; int L_pre = L; int R_pre = R; while (L &lt; R) { if (v[R] &lt; pivot) { v[L] = v[R]; --R; } if (v[L] &gt; pivot) { v[R] = v[L]; ++L; } } v[L] = pivot; QuickSort(v, L_pre, L); QuickSort(v, R, R_pre); } /// &lt;summary&gt; /// /// &lt;/summary&gt; private: //在已有子堆上，不断地建立堆 template&lt;typename T&gt; void Heapify(vector&lt;T&gt;&amp; v, int n, int i) { if (i &gt; n) return; //叶节点序列不超过结点个数 int l_node = 2 * i + 1; int r_node = 2 * i + 2; int max = i; if (l_node &lt; n &amp;&amp; v[i] &lt; v[l_node]) { max = l_node; } if (r_node &lt; n &amp;&amp; v[max] &lt; v[r_node]) { max = r_node; } if (max != i) { swap(v[i], v[max]); Heapify(v, n, max); } } //构建堆， 从堆中最后一个父节点开始构建 template&lt;typename T&gt; void buildheap(vector&lt;T&gt;&amp; v, int i) { int len = v.size(); int lastnode = len - 1; int parent_lastnode = (lastnode - 1)/2; for (i = parent_lastnode; i &gt;= 0; --i) { Heapify(v, len, i); } } //对两个有序的部分进行合并 template&lt;typename T&gt; void _GroupSort(vector&lt;T&gt;&amp; v, int L, int M, int R) { int left_size = M - L; int right_size = R - M + 1; vector&lt;T&gt; LeftV(left_size); vector&lt;T&gt; RightV(right_size); for (int i = L; i &lt; M; ++i) { LeftV[i-L] = v[i]; } for (int i = M; i &lt;= R; ++i) { RightV[i - M] = v[i]; } int i = 0, j = 0, k = L; while (i &lt; left_size &amp;&amp; j &lt; right_size) { if (LeftV[i] &lt; RightV[j]) { v[k++] = LeftV[i++]; } else { v[k++] = RightV[j++]; } } while (i &lt; left_size) v[k++] = LeftV[i++]; while (j &lt; right_size) v[k++] = RightV[j++]; } };};","link":"/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E5%A4%8D%E4%B9%A0-%E6%8E%92%E5%BA%8F/"},{"title":"智能指针","text":"古人曰：好记性不如烂笔头。 引入概念在C++的学习中，指针是一个帮助我们管理内存的工具。当我们为指针申请了一块内存之后，为了内存能够循环利用，我们也需要释放它。但是实在开发中，繁琐的程序往往会让我们遗忘，故引入智能指针。智能指针的工作就是，在它被销毁的时候且内存没有被其他指针指向，会自动释放没有其他指针引用的内存块。 常见的智能指针（C++11）shared_ptr 定义 顾名思义，就是多个shared_ptr可以指向同一块内存。 使用12345678910//createshared_ptr&lt;T&gt; p;shared_ptr&lt;T&gt; p = make_shared&lt;T&gt;();shared_ptr&lt;T&gt; p = make_shared&lt;T&gt;(ags);shared_ptr&lt;T&gt; p = make_shared&lt;T&gt;(n,ags); //n个agsshared_ptr&lt;T&gt; p(new T(val));shared_ptr&lt;T&gt; p(q);shared_ptr&lt;T&gt; p(u); //u是unique_ptr,赋值给p后，因已不是唯一，u被置空。shared_ptr&lt;T&gt; p(q,d); 其他操作 Name Description p.get() 返回p中保存的指针 p.reset(q) 将p指向q p.reset(q,d) d为lamda表达式([capture list](parameter list) -&gt; return type{function type})，p会执行该表达式 swap(q,p)/ p.swap(q) 交换p和q的指针 unique_ptr 定义 与shared_ptr不同，它表示这一块内存只归该指针所有。 使用123unique_ptr&lt;T&gt; u;unique_ptr&lt;T,D&gt; u;unique_ptr&lt;T,D&gt; u(d); 其他操作 Name Description u.release() 将指针置空(空悬指针) u.reset(q) 若q为内置指针，令u指向这个对象，否则，置为空 weak_ptr 定义它可以看作是另一种shared_ptr, 但是当它指向一块shared_ptr 创建12weak_ptr&lt;T&gt; w;weak_ptr&lt;T&gt; w(sp); 其他操作 Name Description w.use_count() 与w共享的shared_prt的数量 w.expired() count为0，返回true，否则为false w.lock() expired为true，返回空，否则返回w指向的shared_ptr","link":"/%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"},{"title":"虚函数","text":"概念 微软官方文档介绍： A virtual function is a member function that you expect to be redefined in derived classes.When you refer to a derived class object using a pointer or a reference to the base class, you can call a virtual function for that object and execute the derived class’s version of the function. 本质上，虚函数是成员函数的一种。它主要应用在多态的场景。它是为了我们能够在定义子类时可以重载从父类继承过来的成员函数（即虚函数）。如果不需要重载，我们也可以直接调用执行它，把它当作普通的成员函数。 代码演示(C++)我们可以写一个父类和一个子类： 123456789101112131415class parent{public: void A() { std::cout&lt;&lt;&quot;This parent's A&quot; &lt;&lt;endl; } virtual void B() { std::cout&lt;&lt;&quot;This parent's B&quot; &lt;&lt;endl; } //虚函数就是在成员函数前加一个virtual};class son : public parent{public: void A(){ std::cout&lt;&lt;&quot;This son's A&quot;&lt;&lt;endl;} void B(){std::cout&lt;&lt;&quot;This son's B&quot;&lt;&lt;endl;}}; 然后我们调用它： 123456int main(){ parent* SON = new son(); SON-&gt;A(); SON-&gt;B();} 运行结果如图： 从结果来看，parent类里的B已经被son类的B重载了。 底层原理那么追根究底，虚函数底层逻辑是什么呢？","link":"/%E8%99%9A%E5%87%BD%E6%95%B0/"}],"tags":[{"name":"leetcode","slug":"leetcode","link":"/tags/leetcode/"},{"name":"翻译","slug":"翻译","link":"/tags/%E7%BF%BB%E8%AF%91/"},{"name":"数据结构","slug":"数据结构","link":"/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"感想","slug":"感想","link":"/tags/%E6%84%9F%E6%83%B3/"},{"name":"c++","slug":"c","link":"/tags/c/"}],"categories":[{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"算法","slug":"技术/算法","link":"/categories/%E6%8A%80%E6%9C%AF/%E7%AE%97%E6%B3%95/"},{"name":"英语","slug":"英语","link":"/categories/%E8%8B%B1%E8%AF%AD/"},{"name":"其他","slug":"其他","link":"/categories/%E5%85%B6%E4%BB%96/"},{"name":"文章阅读","slug":"英语/文章阅读","link":"/categories/%E8%8B%B1%E8%AF%AD/%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/"},{"name":"语言","slug":"技术/语言","link":"/categories/%E6%8A%80%E6%9C%AF/%E8%AF%AD%E8%A8%80/"}]}